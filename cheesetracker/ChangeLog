Sat Jun 23 22:38:25 EDT 2007 J Phelps <godless@users.sf.net>
	* resampler_linear.cpp
	  resampler_cosine.cpp
	  resampler_cubic.cpp
	  resampler_raw.cpp: Rewrote the resamplers. They now
	all use the code in resampler_kernel.cpp, which eliminates
	much of the code duplication.
Sat Jun 23 03:51:59 EDT 2007 J Phelps <godless@users.sf.net>
	* tracker_voice.h: Removed unused definition for
	Tracker_Voice::FRACTIONAL.
	* tracker_voice.cpp: Reintroduced SOME of the fixed-point math.

	Removed the variable "debug_int", which was being used to
	trace a memory error (which turned out to be caused by
	improper data sharing between threads).

	* typedefs.h: Macro WARN() does not use ANSI color sequences
	unless ANSI_COLORS is defined.
	* resampler_manager.cpp (get_resampler): Replaced NULL return
	value with an exception-throw, since the NULL return value is
	never checked for.

	New behavior: get_resampler(-1) is equivalent to
	get_resampler(get_default_resampler()), because this is how
	it's used.

	Added "signed" to the parameter type of p_index to show
	that it really _is_ supposed to be signed.
	* resampler_instance.h (set_current_resampler): Replaced use of
	ERROR macro with an exception-throw.
	* resampler_instance.h (mix): Simplified the initialization
	of resampler_idx because it is no longer necessary to call
	Resampler_Manager::get_default_resampler() explicitly.
	* fixedpoint.h: Renamed to sample_data_fixedpoint.h. Preprocessor
	macros will attempt to prevent its inclusion in source files
	other than sample_data.cpp.
	* fixedpoint_defs.h: Created. Macros previously in fixedpoint.h
	have been moved here. It turns out that certain calculations
	in tracker_voice.cpp cannot be made accurately without
	fixed-point math.
	* resampler_kernel.cpp/h: Created. This is a cleaner
	implementation of the algorithm previously implemented
	with macros from helpers.h.
Fri Jun 15 13:24:02 EDT 2007 J Phelps <godless@users.sf.net>
	* cheesetracker/loaders/loader_raw.cpp
	* cheesetracker/loaders/loader_wav.cpp
	* cheesetracker/loaders/loader_it_samples.cpp
	* cheesetracker/loaders/loader_s3m.cpp
	* cheesetracker/savers/saver_raw.cpp
	* cheesetracker/savers/saver_it.cpp
	* cheesetracker/savers/saver_wav.cpp
	* cheesetracker/trackercore/tracker_voice.cpp
	* common/plugins/edit_effects/simple_edit_effects.cpp
	* common/interface__QT/audio/sample_viewer.cpp
	* common/interface__QT/audio/sample_editor_clipboard.cpp
	* common/components/audio/sample_data.h
	* common/components/audio/sample_data.cpp
	* common/components/audio/dds_helpers.cpp:
		Now using Mutex_Lock instead of multireader_lock for
		access to Sample_Data. Since Sample_Data's access
		functions also manage an internal iterator (instead
		of the iterator being in the calling function),
		Sample_Data must be locked during "read" operations
		as well as "write" operations.

	* pattern.cpp (process_retrieve_request): Performance enhancement:
	Removed exception-throwing behavior because all functions that
	use this function were catching the exception and substututing
	"empty_note" for the return value. So now, it simply returns
	empty_note.

Wed Jun 13 01:10:50 EDT 2007 J Phelps <godless@users.sf.net>
	* sample_data.cpp: ASSERT_NOTFIXEDPOINT is defined to nothing
	if NDEBUG is defined.  * common/components/audio/fixedpoint.h:
	Created. The fixed-point functions from sample_data.h are
	defined here, and there are comments that explain how the whole
	fixed-point scheme works.

	Incidentally, another fixedpoint.h file was discovered,
	common/components/data/fixedpoint.h, which defines a fixed-point
	class for which there are no method definitions in the source.

Tue Jun 12 01:32:10 EDT 2007 J Phelps <godless@users.sf.net>
	* multireader_lock.h/cpp: Created. Any number of threads 
	can hold an multireader_lock, and any one process can lock
	all the others out. This allows many threads to read
	a memory region, and one thread to kick the others out
	for writing.

	* sample_data.h: Now uses a multireader_lock instead of
	a mutex.

Mon Jun 11 14:18:56 EDT 2007 J Phelps <godless@users.sf.net>
	* mutex_lock.h: New method on Mutex_Lock_Container: add().
	This makes it possible to put more than one mutex in the
	same Mutex_Lock_Container, all of which will be released
	together.

Mon Jun 11 10:16:54 EDT 2007 J Phelps <godless@users.sf.net>
	* mutex_lock.h: New class, Mutex_Lock_Container, which locks a
	mutex during construction and unlocks it upon destruction.

	* sample_data.h/cpp (lock): Now returns pointer to
	Mutex_Lock_Container.
	* sample_data.h/cpp (unlock): Removed.
	* sample_data.h/cpp (seek): Now returns the final seek position.

	* tracker_voice.cpp (mix): Using sample_data mutexes.

	* tracker_voice.cpp (add_to_mix_buffer): Renamed several
	cryptically-named variables, corrected an OB1 bug in the
	loop-checking logic.

	Removed the 300-page dissertation on fixed-point numbers.

	* sample_data.cpp (resample functions): Commented out the checks
	for sample EOF, as I attempt to make tracker_voice stay
	perfectly within the boundaries.

	* resampler_instance.h/cpp (set_fractional): Removed.

	* : Removed all variables and class members named
	"fractional_size".

Sun Jun 10 13:50:36 EDT 2007 J Phelps <godless@users.sf.net>
	* resampler_manager_new.cpp: Removed.

	* dds_helpers.cpp (get_effect_chain_data): Corrected "taking
	address of temporary" warning from G++ by creating new local
	variable "property_list".

	Also moved curly braces in function definitions to Column 1,
	so that ']]' works in vi.

Sun Jun 10 13:41:59 EDT 2007 J Phelps 
	* loader_xm.cpp (loader_instrument_internal): Moved the
	sample.data.seek(0) call down to the part that loads the sample
	data from the disk.

Sun Jun 10 06:55:15 EDT 2007 J Phelps <godless@users.sf.net>
	* sample_data.cpp (fixedpoint_move_cursor): Removed the for-loop
	that was previously placed around the whole function. This
	for-loop was intended for a different design that never got
	implemented. Instead, it caused a bug.
